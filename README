PROGETTO II LabSO1 - AA 2019-2020 -- 201931, 202077, 201637, 201647

gruppo federico.izzo@studenti.unitn.it - Variante Ubuntu

simone.alghisi-1@studenti.unitn.it, Simone Alghisi, 202077
emanuele.beozzo@studenti.unitn.it, Emanuele Beozzo, 201637
federico.izzo@studenti.unitn.it, Federico Izzo, 201931
samuele.bortolotti@studenti.unitn.it, Samuele Bortolotti, 201647

-------------------------------------------------------------------
Makefile help:
  * build        : compiles the program and creates the executable files and object files
  * buildMinimal : compiles the program and creates only the executable files
  * clean        : removes all file created during any kind of build operation
  * cleanObj     : removes all object files created during any kind of build operation
  * help         : print this file
  * log          : compiles the program with a preprocessor directive which redirects all components errors in a log file. Then it creates the executable files and object files
  * speed        : compiles the program with a preprocessor directive which ignores all the sleeps. Then it creates the executable files

Project logic:
  * analyzer      : analyzer forks managers and keeps anonymous pipes with them
                    in order to stay informed
  * config        : contains preprocessor directives like error codes and flags
  * list          : a linked list implementation
  * manager       : manager forks mulpiple workers and keeps anonymous pipes with
                    them in order to get the stats gathered from files
  * priorityQueue : a prioriy queue (heap based) implementation
  * reporter      : reporter mantains two pipes:
                    * analyzer -> reporter: in order to gathers data and computes
                      a report
                    * reporter -> analyzer: in oreder to sends user's requests
  * table         : holds counting information
  * tree          : a n-ary tree with list of children implementation
  * tui           : terminal user interface 
  * work          : a worker's work
  * worker        : worker reads and computes the statistic operations on a portion
                    of a file assigned to it 
  * wrapping      : utility functions
  * main          : calls reporter and analyzer after a fork

Directories logic:
.
├── bin
├── Makefile
├── README
├── README.md
├── RFC.pdf
├── src
│   ├── analyzer
│   │   ├── analyzer.c
│   │   ├── analyzer.h
│   │   ├── analyzer.pdf
│   │   ├── manageFileThread.png
│   │   ├── readDirectivesThread.png
│   │   ├── readFifoThread.png
│   │   ├── README.md
│   │   ├── sendFileThread.png
│   │   ├── treeInsertion.png
│   │   └── writeFifoThread.png
│   ├── config
│   │   └── config.h
│   ├── list
│   │   ├── list.c
│   │   └── list.h
│   ├── main.c
│   ├── manager
│   │   ├── directivesThread.png
│   │   ├── manager.c
│   │   ├── manager.h
│   │   ├── manager.pdf
│   │   ├── README.md
│   │   └── workThread.png
│   ├── priorityQueue
│   │   ├── priorityQueue.c
│   │   └── priorityQueue.h
│   ├── reporter
│   │   ├── readFifoLoop.png
│   │   ├── README.md
│   │   ├── reporter.c
│   │   ├── reporter.h
│   │   ├── reporter.pdf
│   │   ├── userInputLoop.png
│   │   └── writeFifoLoop.png
│   ├── table
│   │   ├── table.c
│   │   └── table.h
│   ├── tree
│   │   ├── tree.c
│   │   └── tree.h
│   ├── tui
│   │   ├── README.md
│   │   ├── screenshot.png
│   │   ├── tui.c
│   │   ├── tui.h
│   │   ├── tui.pdf
│   │   └── UI.png
│   ├── work
│   │   ├── work.c
│   │   └── work.h
│   ├── worker
│   │   ├── README.md
│   │   ├── worker.c
│   │   ├── worker.h
│   │   ├── worker.pdf
│   │   └── Worker.png
│   └── wrapping
│       ├── wrapping.c
│       └── wrapping.h
└── team
    ├── EmanueleBeozzo.png
    ├── FedericoIzzo.png
    ├── SamueleBortolotti.png
    └── SimoneAlghisi.png

